Streams
-------

Sorted()---------------------> default sorting order also for primitive datatypes
Sorted(Comparator c); -------> customized sorting order and/or also for userdefined datatypes

10, 2, 18, 19, 21, 1

2,19,21,1----> 


1,2,19,21----> min()--->1, max()---> 21

21,19,2,1---> min()--> 21, max()---> 1

JDBC
----

Java DataBase Connectivity
To establish a communication between the java and database, some api's are used, called JDBC APIs

uses some drivers for establishing the communication

type-1---> jdbc-odbc bridge
type-2---> jdbc - native api
type-3---> net protocol
type-4---> Thin Driver or pure java


ODBC---> databases



java.sql.*;

SQLException


DriverManager

Connection

Statement

ResultSet

PreparedStatement

CallableStatement



steps in establishing the jdbc connectivity
-------------------------------------------


1. loading the driver class  

    1. Class.forName("driver");
    2. DriverManager.registerDriver(DriverObject);


2. establish a connection

   Connection con =  DriverManager.getConnection(url,uid,pwd);


public int fact(int x)
{

return data;

}

int k = fact(4);

3. create a statement object

        Statement st = con.createStatement();


4. write the sql query and execute the query
   String sql="select * from emp"; 
   String sql ="update emp set sal=sal+100 where empno=1001":
	ddl, dml, select


		st.executeQuery()--->select, create, will return an object of type ResultSet
        st.executeUpdate()---> insert, delete, update, ---> will return an int type
        st.execute()--->callable methods
   

5. fetch the result and process the result

	ResultSet rs = st.executeQuery(sql);

	Methods in ResultSet
	----------------------
	rs.next()----> move the pointer to the next avaialbe record in the resultset and returns true
	rs.getInt(1)---> 1001
    rs.getString(2)---> praveen
	rs.getString(3)--> x
	rs.getString(4)--> y
	rs.next();

6. close the connections
    
    rs.close();
    st.close();
    con.close();


Person(pid int,  name varchar2(50), city varchar2(50));


rs.getInt(1)
rs.getString(2)
rs.getString(3)



PreparedStatement
------------------
This is a pre compiled object
By using this object, we can dynamically read the data and execute the query


String sql = "insert into ericsson values(?,?,?)";

PreparedStatement pst = con.prepareStatement(sql);

// read the values from input sources

set the values to the preparedstatement

pst.setInt(1,value1);
pst.setString(2,value2);
pst.setString(3,value3);

pst.executeUpdate();-----> insert, update, delete
pst.executeQuery()----> select



Web Application
----------------

Servlet

Servlet is an java api's which are used to generate dynamic web pages



In java
---------


Servlet inteface---> all the servlet life cycle methods

public void init(ServletConfig config)	
initializes the servlet. 
It is the life cycle method of servlet and invoked by the web container only once.


public void service(ServletRequest request,ServletResponse response)	
provides response for the incoming request. It is invoked at each request by the web container.


public void destroy()	
is invoked only once and indicates that servlet is being destroyed.

public ServletConfig getServletConfig()	
returns the object of ServletConfig.

ServletContextn   

ServletConfig is created for every servlet

But ServletContext is created one per application -- it stores the details of runtime env.,
related to server 


public String getServletInfo()	
returns information about servlet such as writer, copyright, version etc.


class MyServlet implements Servlet{

public void service(){
	// statments 
}


}

init ---> service --->destroy

Servlet----> GenericServlet(overriden with all methods except service)

class MySerlvet extends GenericServlet{
	public void service(){

	}
}




GenericServlet -----> HttpServlet

class MyServlet extends HttpServlet
{

	public void doGet(HttpServletRequest, HttpServletResponse){

	}


}

doPost()

doGet()

doHead()

doOptions()




jsp
---


MVC--->Model View Controller

Model will represent data
View will represent diplay
Controller will embedded model in the view and send response


Directives
Declarations
Action Tags











<%@ page import = "java.io.*,java.util.*,java.sql.*"%>
<%@ page import = "javax.servlet.http.*,javax.servlet.*" %>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix = "c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/sql" prefix = "sql"%>
 
<html>
   <head>
      <title>SELECT Operation</title>
   </head>

   <body>
      <sql:setDataSource var = "snapshot" driver = "com.mysql.jdbc.Driver"
         url = "jdbc:mysql://localhost/TEST"
         user = "root"  password = "pass123"/>
 
      <sql:query dataSource = "${snapshot}" var = "result">
         SELECT * from Employees;
      </sql:query>
 
      <table border = "1" width = "100%">
         <tr>
            <th>Emp ID</th>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Age</th>
         </tr>
         
         <c:forEach var = "row" items = "${result.rows}">
            <tr>
               <td><c:out value = "${row.id}"/></td>
               <td><c:out value = "${row.first}"/></td>
               <td><c:out value = "${row.last}"/></td>
               <td><c:out value = "${row.age}"/></td>
            </tr>
         </c:forEach>
      </table>
 
   </body>
</html>
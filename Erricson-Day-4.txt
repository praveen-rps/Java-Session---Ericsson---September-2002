Inter Thread communication methods

wait()
notify() or notifyAll()

Producer - Consumer


Collections
------------

A Collection represents a single unit of objects, i.e., a group. 
A collections defines a dynamic way of accessing the group of objects.

int a[100];

The Collection in Java is a framework that provides an architecture to store and manipulate the 
group of objects.

Java Collections can achieve all the operations that you perform on a data such as searching, sorting, 
insertion, manipulation, and deletion. 

Java Collection means a single unit of objects. Java Collection framework provides many interfaces 
(Set, List, Queue, Deque) and classes (ArrayList, Vector, LinkedList, PriorityQueue, HashSet, LinkedHashSet, 
TreeSet).


The Collection framework represents a unified architecture for storing and manipulating a group of objects. 
It has:

    Interfaces and its implementations, i.e., classes
    Algorithm


Methods in Collection interface
--------------------------------
1	public boolean add(E e)	
It is used to insert an element in this collection.


2	public boolean addAll(Collection<? extends E> c)	
It is used to insert the specified collection elements in the invoking collection.

3	public boolean remove(Object element)	
It is used to delete an element from the collection.

4	public boolean removeAll(Collection<?> c)	
It is used to delete all the elements of the specified collection from the invoking collection.

5	default boolean removeIf(Predicate<? super E> filter)	
It is used to delete all the elements of the collection that satisfy the specified predicate.

6	public boolean retainAll(Collection<?> c)	
It is used to delete all the elements of invoking collection except the specified collection.

7	public int size()	
It returns the total number of elements in the collection.

8	public void clear()	
It removes the total number of elements from the collection.

9	public boolean contains(Object element)	
It is used to search an element.

10	public boolean containsAll(Collection<?> c)	
It is used to search the specified collection in the collection.

11	public Iterator iterator()	
It returns an iterator.

12	public Object[] toArray()	
It converts collection into array.

13	public <T> T[] toArray(T[] a)	
It converts collection into array. 
Here, the runtime type of the returned array is that of the specified array.

14	public boolean isEmpty()	
It checks if collection is empty.

15	default Stream<E> parallelStream()	
It returns a possibly parallel Stream with the collection as its source.

16	default Stream<E> stream()	
It returns a sequential Stream with the collection as its source.

17	default Spliterator<E> spliterator()	
It generates a Spliterator over the specified elements in the collection.

18	public boolean equals(Object element)	
It matches two collections.

19	public int hashCode()	
It returns the hash code number of the collection.




List
----
1. It is an linear arrangement of data
2. All th elements in the list are accessed sequentially by using an index
3. Elements can be duplicated 
4. null values can be allowed
5. insertion order is maintained.

ArrayList is an implementation of List and uses array as its datastructure to implemnet

LinkedList is an implementation of list and uses linked list data structure to implemnet

Traversal on collection objects
---------------------------------
1. Iterator class object

Methods in Iterator interace
1. next()--fetch the element 
2. hasNext()-->return true if there is next element avaiable in the list

methods in ListIterator interface

1. next()
2. hasNext()
3. previous()
4. hasPrevious()


2. for using simple collection for loop

3. forEach

SET
---
It is a subclass of collection hierarchy

1. It manges the elements in random fashion
2. Duplicate elements are not allowed.
3. Insertion order is not maintained.
4. null values are allowed only once.

SET has 3 implementation class
1. HashSet

2. LinkedHashSet -- HashSet, except that elements insertion order is maintained.
    since, it uses linkedlink

3. TreeSet  --Like HashSet, except that it displays the elements in the sorted order.
   TreeSet internally used a balanced binary tree to store the data, so when retreived
  the data will be returned in the sorted order.



Comparable
----------
Comparable is an functional interface, which has only one method called compareTo, we have to 
override the compareTo method to sort the userdefined data.





compareTo is a method from string class
-1  ---> then first string comes first in the alphabetical sequence
+1 ---> then second string comes first in the alphabetical sequence
0 ---> when both strings are equal

Str2 = "Apple";
Str1="Apple";

65-65= 0

Str1.compareTo(str2);



Comparator
-----------
This interface is used to for userdefined sorting order, multiple sortings can also be implemented.

This is also an functional interface, which consists of only one method called compare(), we have to
override the compare method.



Collections ---Utility class, in which we have sort() method;
List, set and queue are single dimensional elements.

Two Dimensional objects exists called as Map

Map is a two dimensional objects, which will stores the data in the form of key and value pair
both key and value must be objects

Keys must be unique and values can be duplicated.

Map  --->

HashMap
LinkedHashMap
TreeMap




Methods in Map
---------------

V put(Object key, Object value)	
It is used to insert an entry in the map.


void putAll(Map map)	
It is used to insert the specified map in the map.

V putIfAbsent(K key, V value)	
It inserts the specified value with the specified key in the map only if it is not already specified.

V remove(Object key)	
It is used to delete an entry for the specified key.


boolean remove(Object key, Object value)	
It removes the specified values with the associated specified keys from the map.

V replace(K key, V value)	
It replaces the specified value for a specified key.


boolean replace(K key, V oldValue, V newValue)	
It replaces the old value with the new value for a specified key.


void replaceAll(BiFunction<? super K,? super V,? extends V> function)	
It replaces each entry's value with the result of invoking the given function on that entry 
until all entries have been processed or the function throws an exception.


Collection values()	
It returns a collection view of the values contained in the map.


int size()	
This method returns the number of entries in the map.


Set keySet()	
It returns the Set view containing all the keys.

boolean containsValue(Object value)	
This method returns true if some value equal to the value exists within the map, else return false.

boolean containsKey(Object key)	This method returns true if some key equal to the key exists within the map, 
else return false.


Set<Map.Entry<K,V>> entrySet()	
It returns the Set view containing all the keys and values.


void clear()	
It is used to reset the map.


V compute(K key, BiFunction<? super K,? super V,? extends V> remappingFunction)	
It is used to compute a mapping for the specified key and its current mapped value 
(or null if there is no current mapping).


V computeIfAbsent(K key, Function<? super K,? extends V> mappingFunction)	
It is used to compute its value using the given mapping function, if the specified key is not 
already associated with a value (or is mapped to null), and enters it into this map unless null.


V computeIfPresent(K key, BiFunction<? super K,? super V,? extends V> remappingFunction)	
It is used to compute a new mapping given the key and its current mapped value if the value for 
the specified key is present and non-null.



boolean equals(Object o)	
It is used to compare the specified Object with the Map.

void forEach(BiConsumer<? super K,? super V> action)	
It performs the given action for each entry in the map until all entries have been processed or the 
action throws an exception.


V get(Object key)	
This method returns the object that contains the value associated with the key.


V getOrDefault(Object key, V defaultValue)	
It returns the value to which the specified key is mapped, or defaultValue if the map contains 
no mapping for the key.


int hashCode()	
It returns the hash code value for the Map


boolean isEmpty()	
This method returns true if the map is empty; returns false if it contains at least one key.

V merge(K key, V value, BiFunction<? super V,? super V,? extends V> remappingFunction)	
If the specified key is not already associated with a value or is associated with null, associates 
it with the given non-null value.







